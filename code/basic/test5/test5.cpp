#include <iostream>
using namespace std;

    void swap(int* a,int* b)//地址传递（注意与值传递区别）
    {
        int c=*a;
        *a=*b;
        *b=c;
    }

int main()
{
    /*指针：间接访问内存
    指针定义，使用(解引用)
    指针占用内存空间(32位操作系统占4字节，64位占8字节，无论数据类型)
    空指针：初始化指针变量，不可以访问
    野指针：指针变量指向非法的内存空间（尽量避免野指针）,不可以访问
    const修饰指针:3种情况  const修饰指针（常量指针） 修饰常量（指针常量） 都修饰
    指针+数组  利用指针访问数组中的元素
    指针+函数  利用指针作为函数参数，可以修改实参的值
    */

   int a=10;
   int b=20;
   int* p;  //定义指针： 数据类型 *指针变量名(int* p=&a)
   p=&a;    //指针记录变量地址
   cout<<"a 的地址为 "<<p<<endl;
   *p=1000; //指针前加*号，代表解引用，可以找到指针指向的内存
   cout<<"*p= "<<*p<<endl;
   cout<<"a= "<<a<<endl;
   cout<<"指针占用内存为 "<<sizeof(double*)<<endl;  //sizeof(p)

   double* b1=NULL;  //空指针 *b=10.2会出现异常，原因：0-255间内存编号系统占用   

   int* c=(int*)0x1100; //随便申请一个内存空间，无权限访问  *c会出现异常 尽量避免

   const int*d=&a;  //常量指针，指针指向可以修改，指针指向的值不可以修改
   p=&b;   //*p=20这是错误的
   int* const e=&a;  //指针常量，指针指向不可以改，指针指向的值可以修改
   *e=a;   //e=&b错误
   const int* const f=&a; //指针指向和值都不可以改

   int arr[10]={1,2,3,4,5,6,7,8,9,10};
   int* g=arr;  //arr就是数组首地址
   cout<<"数组第一个元素 "<<*g<<endl; //数组第一个元素
//    g++; //指针偏移4字节（因为他是int，若是其他也对应改变）
//    cout<<"数组第二个元素 "<<*g<<endl;
   for (int i=0;i<10;i++)
   {
       cout<<"数组中第"<<i+1<<"个元素为 "<<*g<<endl;
       g++;
   }

   swap(&a,&b);  //地址传递可以修饰实参（值传递不可以）
   cout<<"a="<<a<<endl;
   cout<<"b="<<b<<endl;

    system ("pause");
    return 0;
}